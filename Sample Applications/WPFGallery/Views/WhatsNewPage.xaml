<Page x:Class="WPFGallery.Views.WhatsNewPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WPFGallery.Views"
      xmlns:controls="clr-namespace:WPFGallery.Controls"
      mc:Ignorable="d" 
      Foreground="{DynamicResource TextFillColorPrimaryBrush}"
      d:DesignHeight="450" d:DesignWidth="800"
      Title="What's New in WPF">
    <Page.Resources>
        <Style x:Key="SubHeaderTextStyle" TargetType="TextBlock">
            <Setter Property="Margin" Value="0,24,0,8" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="Bold" />
        </Style>
    </Page.Resources>

    <Grid x:Name="ContentPagePane" Height="Auto">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <controls:PageHeader Margin="0,0,0,32" Title="{Binding ViewModel.PageTitle}" Description="{Binding ViewModel.PageDescription}" ShowDescription="False" />

        <ScrollViewer Grid.Row="1" Margin="0,0,0,24" Padding="0,0,24,0">
            <StackPanel>
                <TextBlock Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 0 0 12">
                    Accent colors as SystemColors
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0 0 0 12">
                    <Run>
                        Since Windows 10, Accent Color became a cornerstone for visual 
                        styling, enhancing consistency across apps by aligning with 
                        the system theme. 
                        The latest introduction of AccentColors and corresponding 
                        brushes in SystemColors simplifies this process 
                        for WPF developers, offering them direct access to 
                        system accent colors and their variations.
                    </Run>
                </TextBlock>
                
                <controls:ControlExample
                    Margin="2 10"
                    HeaderText="AccentColor API"
                    XamlCode="{Binding ViewModel.AccentColorXamlCode}">
                    <Grid>
                        <StackPanel Orientation="Horizontal" Height="50">
                            <StackPanel.Resources>
                                <Style TargetType="Border">
                                    <Setter Property="Height" Value="50" />
                                    <Setter Property="Width" Value="30" />
                                </Style>
                            </StackPanel.Resources>
                            <Border CornerRadius="2 0 0 2" Background="{x:Static SystemColors.AccentColorDark3Brush}" />
                            <Border Background="{x:Static SystemColors.AccentColorDark2Brush}" />
                            <Border Background="{x:Static SystemColors.AccentColorDark1Brush}" />
                            <Border Background="{x:Static SystemColors.AccentColorBrush}" />
                            <Border Background="{x:Static SystemColors.AccentColorLight1Brush}" />
                            <Border Background="{x:Static SystemColors.AccentColorLight2Brush}" />
                            <Border CornerRadius="0 2 2 0" Background="{x:Static SystemColors.AccentColorLight3Brush}" />
                        </StackPanel>
                    </Grid>
                </controls:ControlExample>

                <TextBlock Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 24 0 12">
                    [ Experimental ] ThemeMode API
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0 0 0 12">
                    <Run>
                        This experimental API enables easy switching between Fluent Themes in WPF 
                        applications, improving user experience and accessibility. 
                        This experimental API, available at both the Application and 
                        Window level, allows developers to dynamically toggle between 
                        Light, Dark, System, or None (Default) themes, offering 
                        greater flexibility in adapting app visuals.
                    </Run>
                    <LineBreak />
                    <LineBreak />
                    <Run>
                        Since the API is experimental, the usage of ThemeMode from 
                        code-behind is a bit restricted. To use ThemeMode from 
                        code-behind, the developer either needs to configure 
                        the project to ignore the WPF0001 warning for the project 
                        or suppress the warning where needed.
                    </Run>
                    <!--<LineBreak />
                    <LineBreak />
                    <Run>For more information on how to use ThemeMode API, visit : <Hyperlink></Hyperlink></Run>-->
                </TextBlock>

                <TextBlock Style="{StaticResource SubtitleTextBlockStyle}" Margin="0 24 0 12">
                    Hyphen based ligature support
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0 0 0 12">
                    <Run>
                        Based on the WPF community feedback, we have now fixed the 
                        issue with Hyphen based ligatures not working in WPF.
                    </Run>
                </TextBlock>

                <controls:ControlExample
                    Margin="2 10"
                    HeaderText="Hyphen based ligature example"
                    XamlCode="{Binding ViewModel.HyphenBasedLigatureXamlCode}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="0 0 16 0" FontFamily="Cascadia Code" Text="-->" />
                        <TextBlock Margin="0 0 16 0" FontFamily="Cascadia Code" Text="&lt;!--" />
                        <TextBlock Margin="0 0 16 0" FontFamily="Cascadia Code" Text="&lt;--" />
                    </StackPanel>
                </controls:ControlExample>

            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
